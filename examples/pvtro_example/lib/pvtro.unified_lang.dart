// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by pvtro_builder
// Found 2 slang packages with 13 unique locales

import 'package:pvtro/cubit.dart';

import 'package:pvtro_common/i18n/strings.g.dart' as pvtro_common_i18n;
import 'package:pvtro_conver/i18n/strings.g.dart' as pvtro_conver_i18n;

/// Unified language code enum that represents all supported languages
/// across all discovered slang packages
enum UnifiedLanguage {
  /// Language code: da
  da,
  /// Language code: en
  en,
  /// Language code: es
  es,
  /// Language code: fr
  fr,
  /// Language code: he
  he,
  /// Language code: isIs
  isIs,
  /// Language code: ko
  ko,
  /// Language code: nb
  nb,
  /// Language code: nl
  nl,
  /// Language code: no
  no,
  /// Language code: sv
  sv,
  /// Language code: zh
  zh,
  /// Language code: zhHans
  zhHans,
}

/// Extension to convert UnifiedLanguage to language code string
extension UnifiedLanguageExtension on UnifiedLanguage {
  String get languageCode {
    switch (this) {
      case UnifiedLanguage.da:
        return 'da';
      case UnifiedLanguage.en:
        return 'en';
      case UnifiedLanguage.es:
        return 'es';
      case UnifiedLanguage.fr:
        return 'fr';
      case UnifiedLanguage.he:
        return 'he';
      case UnifiedLanguage.isIs:
        return 'isIs';
      case UnifiedLanguage.ko:
        return 'ko';
      case UnifiedLanguage.nb:
        return 'nb';
      case UnifiedLanguage.nl:
        return 'nl';
      case UnifiedLanguage.no:
        return 'no';
      case UnifiedLanguage.sv:
        return 'sv';
      case UnifiedLanguage.zh:
        return 'zh';
      case UnifiedLanguage.zhHans:
        return 'zhHans';
    }
  }

  /// Parse language code string to UnifiedLanguage
  static UnifiedLanguage? fromLanguageCode(String code) {
    switch (code.toLowerCase()) {
      case 'da':
        return UnifiedLanguage.da;
      case 'en':
        return UnifiedLanguage.en;
      case 'es':
        return UnifiedLanguage.es;
      case 'fr':
        return UnifiedLanguage.fr;
      case 'he':
        return UnifiedLanguage.he;
      case 'isis':
        return UnifiedLanguage.isIs;
      case 'ko':
        return UnifiedLanguage.ko;
      case 'nb':
        return UnifiedLanguage.nb;
      case 'nl':
        return UnifiedLanguage.nl;
      case 'no':
        return UnifiedLanguage.no;
      case 'sv':
        return UnifiedLanguage.sv;
      case 'zh':
        return UnifiedLanguage.zh;
      case 'zhhans':
        return UnifiedLanguage.zhHans;
      default:
        return null;
    }
  }
}


/// Creates a LocaleCubit with all discovered slang packages connected
LocaleCubit<UnifiedLanguage> createUnifiedLocaleCubit({
  UnifiedLanguage defaultLocale = UnifiedLanguage.en,
}) {
  return LocaleCubit<UnifiedLanguage>(
    defaultLocale: defaultLocale,
    enumToLanguageCode: (locale) => locale.languageCode,
    languageCodeToEnum: (code) => UnifiedLanguageExtension.fromLanguageCode(code),
    subpackageLocaleSetters: [
      // pvtro_common package locale setter
      (languageCode) {
        final locale = _parsePvtro_commonLocale(languageCode);
        if (locale != null) {
          pvtro_common_i18n.LocaleSettings.setLocale(locale);
        }
      },
      // pvtro_conver package locale setter
      (languageCode) {
        final locale = _parsePvtro_converLocale(languageCode);
        if (locale != null) {
          pvtro_conver_i18n.LocaleSettings.setLocale(locale);
        }
      },
    ],
  );
}

/// Parse language code to pvtro_common AppLocale
pvtro_common_i18n.AppLocale? _parsePvtro_commonLocale(String languageCode) {
  switch (languageCode.toLowerCase()) {
    case 'en':
      return pvtro_common_i18n.AppLocale.en;
    case 'da':
      return pvtro_common_i18n.AppLocale.da;
    case 'es':
      return pvtro_common_i18n.AppLocale.es;
    case 'fr':
      return pvtro_common_i18n.AppLocale.fr;
    case 'he':
      return pvtro_common_i18n.AppLocale.he;
    case 'isis':
      return pvtro_common_i18n.AppLocale.isIs;
    case 'ko':
      return pvtro_common_i18n.AppLocale.ko;
    case 'nb':
      return pvtro_common_i18n.AppLocale.nb;
    case 'nl':
      return pvtro_common_i18n.AppLocale.nl;
    case 'no':
      return pvtro_common_i18n.AppLocale.no;
    case 'sv':
      return pvtro_common_i18n.AppLocale.sv;
    case 'zh':
      return pvtro_common_i18n.AppLocale.zh;
    case 'zhhans':
      return pvtro_common_i18n.AppLocale.zhHans;
    default:
      return null;
  }
}

/// Parse language code to pvtro_conver AppLocale
pvtro_conver_i18n.AppLocale? _parsePvtro_converLocale(String languageCode) {
  switch (languageCode.toLowerCase()) {
    case 'en':
      return pvtro_conver_i18n.AppLocale.en;
    case 'da':
      return pvtro_conver_i18n.AppLocale.da;
    case 'es':
      return pvtro_conver_i18n.AppLocale.es;
    case 'fr':
      return pvtro_conver_i18n.AppLocale.fr;
    case 'he':
      return pvtro_conver_i18n.AppLocale.he;
    case 'isis':
      return pvtro_conver_i18n.AppLocale.isIs;
    case 'ko':
      return pvtro_conver_i18n.AppLocale.ko;
    case 'nb':
      return pvtro_conver_i18n.AppLocale.nb;
    case 'nl':
      return pvtro_conver_i18n.AppLocale.nl;
    case 'no':
      return pvtro_conver_i18n.AppLocale.no;
    case 'sv':
      return pvtro_conver_i18n.AppLocale.sv;
    case 'zh':
      return pvtro_conver_i18n.AppLocale.zh;
    case 'zhhans':
      return pvtro_conver_i18n.AppLocale.zhHans;
    default:
      return null;
  }
}


