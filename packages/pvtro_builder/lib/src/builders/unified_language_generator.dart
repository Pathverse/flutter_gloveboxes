import 'applocale_scanner.dart';

/// Generates the unified language enum and locale management code
class UnifiedLanguageGenerator {
  /// Generate the unified language enum from discovered slang packages
  String generateUnifiedLanguageEnum(List<SlangPackage> packages) {
    // Collect all unique language codes from all packages
    final allLocales = <String>{};
    for (final package in packages) {
      allLocales.addAll(package.availableLocales);
    }

    // Sort for consistent output
    final sortedLocales = allLocales.toList()..sort();

    final buffer = StringBuffer();

    // Generate file header
    buffer.writeln('// GENERATED CODE - DO NOT MODIFY BY HAND');
    buffer.writeln('// Generated by pvtro_builder');
    buffer.writeln(
      '// Found ${packages.length} slang packages with ${sortedLocales.length} unique locales',
    );
    buffer.writeln();

    // Generate the unified enum
    buffer.writeln(
      '/// Unified language code enum that represents all supported languages',
    );
    buffer.writeln('/// across all discovered slang packages');
    buffer.writeln('enum UnifiedLanguage {');

    for (final locale in sortedLocales) {
      // Handle special cases where locale code can't be used as identifier
      final enumName = _sanitizeEnumName(locale);
      buffer.writeln('  /// Language code: $locale');
      buffer.writeln('  $enumName,');
    }

    buffer.writeln('}');
    buffer.writeln();

    // Generate extension methods
    buffer.writeln(
      '/// Extension to convert UnifiedLanguage to language code string',
    );
    buffer.writeln('extension UnifiedLanguageExtension on UnifiedLanguage {');
    buffer.writeln('  String get languageCode {');
    buffer.writeln('    switch (this) {');

    for (final locale in sortedLocales) {
      final enumName = _sanitizeEnumName(locale);
      buffer.writeln('      case UnifiedLanguage.$enumName:');
      buffer.writeln('        return \'$locale\';');
    }

    buffer.writeln('    }');
    buffer.writeln('  }');
    buffer.writeln();

    // Generate fromLanguageCode method
    buffer.writeln('  /// Parse language code string to UnifiedLanguage');
    buffer.writeln('  static UnifiedLanguage? fromLanguageCode(String code) {');
    buffer.writeln('    switch (code.toLowerCase()) {');

    for (final locale in sortedLocales) {
      final enumName = _sanitizeEnumName(locale);
      final variations = _getLocaleVariations(locale);

      for (final variation in variations) {
        buffer.writeln('      case \'$variation\':');
      }
      buffer.writeln('        return UnifiedLanguage.$enumName;');
    }

    buffer.writeln('      default:');
    buffer.writeln('        return null;');
    buffer.writeln('    }');
    buffer.writeln('  }');
    buffer.writeln('}');

    return buffer.toString();
  }

  /// Generate the locale setup code that connects all slang packages
  String generateLocaleSetup(List<SlangPackage> packages) {
    final buffer = StringBuffer();

    // Generate file header
    buffer.writeln('// GENERATED CODE - DO NOT MODIFY BY HAND');
    buffer.writeln('// Generated by pvtro_builder');
    buffer.writeln();

    // Generate imports
    buffer.writeln("import 'package:pvtro/cubit.dart';");
    buffer.writeln("import 'unified_language.dart';");
    buffer.writeln();

    for (final package in packages) {
      buffer.writeln("import '${package.importPath}' as ${package.name}_i18n;");
    }
    buffer.writeln();

    // Generate the setup function
    buffer.writeln(
      '/// Creates a LocaleCubit with all discovered slang packages connected',
    );
    buffer.writeln('LocaleCubit<UnifiedLanguage> createUnifiedLocaleCubit({');
    buffer.writeln('  UnifiedLanguage defaultLocale = UnifiedLanguage.en,');
    buffer.writeln('}) {');
    buffer.writeln('  return LocaleCubit<UnifiedLanguage>(');
    buffer.writeln('    defaultLocale: defaultLocale,');
    buffer.writeln('    enumToLanguageCode: (locale) => locale.languageCode,');
    buffer.writeln(
      '    languageCodeToEnum: (code) => UnifiedLanguageExtension.fromLanguageCode(code),',
    );
    buffer.writeln('    subpackageLocaleSetters: [');

    // Generate locale setters for each package
    for (final package in packages) {
      if (package.localeSettingsClass != null) {
        buffer.writeln('      // ${package.name} package locale setter');
        buffer.writeln('      (languageCode) {');
        buffer.writeln(
          '        final locale = _parse${_capitalize(package.name)}Locale(languageCode);',
        );
        buffer.writeln('        if (locale != null) {');
        buffer.writeln(
          '          ${package.name}_i18n.${package.localeSettingsClass}.setLocale(locale);',
        );
        buffer.writeln('        }');
        buffer.writeln('      },');
      }
    }

    buffer.writeln('    ],');
    buffer.writeln('  );');
    buffer.writeln('}');
    buffer.writeln();

    // Generate locale parsing functions for each package
    for (final package in packages) {
      buffer.writeln('/// Parse language code to ${package.name} AppLocale');
      buffer.writeln(
        '${package.name}_i18n.AppLocale? _parse${_capitalize(package.name)}Locale(String languageCode) {',
      );
      buffer.writeln('  switch (languageCode.toLowerCase()) {');

      for (final locale in package.availableLocales) {
        final variations = _getLocaleVariations(locale);
        for (final variation in variations) {
          buffer.writeln('    case \'$variation\':');
        }
        buffer.writeln('      return ${package.name}_i18n.AppLocale.$locale;');
      }

      buffer.writeln('    default:');
      buffer.writeln('      return null;');
      buffer.writeln('  }');
      buffer.writeln('}');
      buffer.writeln();
    }

    return buffer.toString();
  }

  /// Sanitize locale code to be a valid Dart identifier
  String _sanitizeEnumName(String locale) {
    // Handle special cases
    final sanitized = locale
        .replaceAll('-', '_')
        .replaceAll(RegExp(r'[^a-zA-Z0-9_]'), '_');

    // Handle keywords and special cases
    switch (sanitized.toLowerCase()) {
      case 'is':
        return 'isIs';
      case 'in':
        return 'inIn';
      case 'if':
        return 'ifIf';
      case 'do':
        return 'doDo';
      default:
        return sanitized;
    }
  }

  /// Get common variations of a locale code
  List<String> _getLocaleVariations(String locale) {
    final variations = <String>[locale.toLowerCase()];

    // Add common variations
    if (locale.contains('_')) {
      variations.add(locale.replaceAll('_', '-').toLowerCase());
    }
    if (locale.contains('-')) {
      variations.add(locale.replaceAll('-', '_').toLowerCase());
    }

    return variations.toSet().toList();
  }

  /// Capitalize first letter of a string
  String _capitalize(String text) {
    if (text.isEmpty) return text;
    return text[0].toUpperCase() + text.substring(1);
  }
}
